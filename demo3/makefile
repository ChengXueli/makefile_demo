# # 基本变量
# # 最基础的赋值
# hello = hello makefile
# # 数字变量名，不推荐
# 123 = 123
# # 引用之后赋值的变量
# a = $x
# # 无限递归自引用，会报错
# # b = $b $x
# # 使用一次性展开赋值，此时等号右边的$b和$x的值都是空，赋值完后，等号左边的b表示的值也是空
# b := $b$x

# c = first
# # 覆盖之前的赋值
# c = second
# # 已经赋过值，此时不再赋值
# c ?= third

# d = abc
# d += def

# x = x
# all:
# 	@echo \"${hello}, $(123) $a $b $c $d\"


# 输出结果 "hello makefile, 123 x second abc def"

# --------------------------------------
# 我是一条分割符
# --------------------------------------
# # 多行变量
# define multi-line
# 123
# echo abc
# echo 一二三
# endef

# all:
# 	@echo ${multi-line}

#输出三行，每行分别是"123"、"abc"、"一二三"

# --------------------------------------
# 我是一条分割符
# --------------------------------------
# # 特殊变量
# main:main.c 1 1 main.c
# 	@gcc -o $@ main.c
# 	@echo \"[$<] [$^] [$+] [$?]\"

# # 第一次执行make时，输出"[main.c] [main.c 1] [main.c 1 1 main.c] [main.c 1]"
# # 修改"1"后再make, 输出"[main.c] [main.c 1] [main.c 1 1 main.c] [1]"
# # 可以看到$?对应的输出只有"1"了，因为只修改了它，它比目标新
# --------------------------------------
# 我是一条分割符
# --------------------------------------

x = y
y = z
a = ${$x}
# => a = $(y) = z

all:
	@echo \"$a\"

# 输出"z"